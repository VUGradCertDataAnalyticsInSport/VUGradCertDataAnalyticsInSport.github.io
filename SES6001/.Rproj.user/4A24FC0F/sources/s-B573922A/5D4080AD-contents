---
output:
  xaringan::moon_reader:
    css: ["/VictoriaUniversity.css", "rladies-fonts"]
    nature:
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
      ratio: 16:9 
      
---
class: title-slide
background-image: url(https://raw.githubusercontent.com/SportStatisticsRSweet/WCSF_WorkshopInR/master/WhittenOval.jpg)
background-size: cover 
.center[ 
# Data Analytics in Sport Science   
## Alice Sweeting, PhD  
.large[Melbourne Business Analytics Conference | Tuesday 3rd September 2019]<br><br><br>   
]
 

```{r setup, include=FALSE}
options(htmltools.dir.version = FALSE, knitr.table.format = "html")
knitr::opts_chunk$set(fig.retina = 3, warning = FALSE, message = FALSE)
library(icon)      
library(tidyverse) 
```


---
class: left
.center[
# VU-WB Sport Science Partnership
]
<img src="https://www.vu.edu.au/sites/default/files/styles/full_width_at_small_breakpoint/public/images/HighPerformanceTeam_20171205_016.jpg?itok=g3ORHZon" width="60%" align="right"/>
<br>
.pull-left[.content-box-red[Knowledge exchange between VU-WB]]

---
class: left
.center[
# VU-WB Sport Science Partnership
]
<img src="https://www.vu.edu.au/sites/default/files/western-bulldogs-training.jpg" align="right"/>
<br>
.pull-left[.content-box-red[Knowledge exchange between VU-WB]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-blue[Data collection and athlete monitoring]]

---
class: left
.center[
# VU-WB Sport Science Partnership
]
<img src="https://cdn.newsapi.com.au/image/v1/fbabfe351f5a109cdb666d1a84001f67?width=1024" width="60%" align="right"/>
<br>
.pull-left[.content-box-red[Knowledge exchange between VU-WB]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-blue[Data collection and athlete monitoring]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-red[Sport science research program]]
<br>
<br>
<br>
.right[.caption[
Image source: The Australian
]] 
---
class: left
.center[
# VU-WB Sport Science Partnership
]
<img src="MozVU.png", width="60%" align="right">
<br>
.pull-left[.content-box-red[Knowledge exchange between VU-WB]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-blue[Data collection and athlete monitoring]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-red[Sport science research program]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-blue[Evidence-based support strategies]]   


---
class: left
.center[
# Examples of Data in Sport Science
]
<img src="https://s.afl.com.au/staticfile/AFL%20Tenant/WesternBulldogs/Images/WEIGHTS_MitchWallis.jpg" width="70%" align="right"/>
<br>
.pull-left[.content-box-yellow[Profiling strength over time]]
<br>
<br> 
<br>
<br>
<br>

---
class: left
.center[
# Examples of Data in Sport Science
]
<img src="https://hudl-content.s3.amazonaws.com/craft/sportstec-bid-04.jpg?mtime=20161205122419" height="25%" align="right"/>
<br>
.pull-left[.content-box-grey[Profiling strength over time]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-yellow[Analysing skilled performance]]
<br>
<br>
<br>
<br>
<br>
<br>
.right[.caption[
Image source: Hudl
]] 
---

class: left
.center[
# Examples of Data in Sport Science
]
<img src="https://static.capabiliaserver.com/frontend/clients/barca/wp/wp-content/uploads/2019/07/f5e8161c-figura_2-eng.jpg", width="60%" align="right">
<br>
.pull-left[.content-box-grey[Profiling strength over time]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-grey[Analysing skilled performance]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-yellow[Assessing readiness to train]]
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
.right[.caption[
Image source: Barca Innovation Hub
]] 
---

class: left
.center[
# Examples of Data in Sport Science
]
<img src="GPS.JPG", width="65%" align="right">
<br>
.pull-left[.content-box-grey[Profiling strength over time]]
<br>
<br> 
<br>
<br>
<br>
.pull-left[.content-box-grey[Analysing skilled performance]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-grey[Assessing readiness to train]]
<br>
<br>
<br>
<br>
<br>
.pull-left[.content-box-yellow[Measuring physical output]]
<br>
<br>
<br>
<br>
<br> 

---

class: inverse, left, top
background-image: url(https://raw.githubusercontent.com/SportStatisticsRSweet/WCSF_WorkshopInR/master/Figures/AFL_Tackle.JPG)
background-size: cover
# Measuring the Physical Output of AFL Players

---

class: left
.center[
# Player Tracking in AFL
] 

* Global Positioning Systems .bold[(GPS)]
<br>
Capture data on the position and displacement of players (outdoor use only)
<br>
<br>
* Local Positioning Systems .bold[(LPS)]
<br>
Capture position and displacement with better accuracy than GPS (indoor and outdoor use)
<br>
<br>
<img src="LPS.jpg", width="50%", align="right">
<br>
<br>
<img src="Vector.png", width="45%", align="left">
.caption[
Image(s) source: Catapult Sports
]

---

class: center
# Aggregate Parameters - Profiling Training
``````{r CreateDrillTable2, echo = FALSE}
library(kableExtra)
DrillEventData <- data.frame(Athlete = c("Warm Up", "Kick in Pairs", "4 v 3 Game", "Half Ground"), 
                             'Total Duration (mins)' = c(10, 6, 5, 9),
                             'Total Distance (m)' = c(1026, 414, 849,921),
                             'Total HIR (m)' = c(83, 12, 277, 362))
DrillEventData$`Metres per Min (m/min)` <- DrillEventData$Total.Distance..m./DrillEventData$Total.Duration..mins.
colnames(DrillEventData) <- c("Drill Name", "Total Duration (minutes)", "Total Distance (m) Covered", 
                              "Total HIR (m) Covered", "Metres per Min (m/min) Covered")
DrillEventData %>%
  kable("html", escape = T, booktabs = T, align = "c",
  digits = 0, table.attr = "style = \"color: black;\"")%>%
  kable_styling(position = "center", font_size = 20, bootstrap_options = c("responsive","bordered"))%>%
  row_spec(0, bold = T, color = "white", background = "#000000", extra_css = "border-right: 1px solid")  %>%
  #column_spec(1:6, border_left = T, border_right = T)  %>%
  row_spec(nrow(DrillEventData), color = "black", extra_css = "border-bottom: 1px solid")
```
<img src="Dunks.JPG", align="center" width="50%">

---

class: center
# Aggregate Parameters - Profiling Matches
``````{r CreateTable, echo = FALSE}
library(kableExtra)
MatchEventData <- data.frame(Athlete = c("Player A", "Player B", "Player C", "Player D"), 
                             'Total Duration (mins)' = c(119, 101, 98, 108),
                             'Total Distance (m)' = c(12439, 11954,13286,12893),
                             'Total HIR (m)' = c(2053, 2584, 3885, 2655))
MatchEventData$`Metres per Min (m/min)` <- MatchEventData$Total.Distance..m./MatchEventData$Total.Duration..mins.
colnames(MatchEventData) <- c("Athlete Name", "Total Duration (minutes)", "Total Distance (m) Covered", 
                              "Total HIR (m) Covered", "Metres per Min (m/min) Covered")
MatchEventData %>%
  kable("html", escape = T, booktabs = T, align = "c",
  digits = 0, table.attr = "style = \"color: black;\"")%>%
  kable_styling(position = "center", font_size = 20, bootstrap_options = c("responsive","bordered"))%>%
  row_spec(0, bold = T, color = "white", background = "#000000", extra_css = "border-right: 1px solid")  %>%
  #column_spec(1:6, border_left = T, border_right = T)  %>%
  row_spec(nrow(MatchEventData), color = "black", extra_css = "border-bottom: 1px solid")
```
<img src="GWSMatch.JPG", align="middle" width="70%">

---
class: inverse, right, top
background-image: url(https://raw.githubusercontent.com/SportStatisticsRSweet/WCSF_WorkshopInR/master/Figures/AFL_Hunter.JPG)
background-size: cover
# Moving Past Aggregate Parameters
 
---
class: center
# Visualising Raw (GPS) Trace Data

```{r fig.height = 7, fig.width = 15, echo = FALSE}
# Import trace file into the environment
RawGPSTrace <- read.csv("C:/Users/e5104072/OneDrive - Victoria University/DunkleyTraceData.csv")
# Trim at sample 3000
RawGPSTrace <- RawGPSTrace  %>%
  filter(Sample > 3000) %>%
  mutate(Sample = 1:n())
# Time into sample
RawGPSTrace$Time <- RawGPSTrace$Sample/10
# Turn time into minute
RawGPSTrace$Minutes <- (RawGPSTrace$Time)/60
# Basic plot
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```

---

class: center
# Analysing Raw (GPS) Trace Data

```{r fig.height = 7.5, fig.width = 15, echo = FALSE}
# Calculate velocity bands
BandedData <- RawGPSTrace %>%
  mutate(VelocityBand = ifelse(Velocity > 0 & Velocity < 4.2, 'Low Intensity', 
                               ifelse(Velocity > 4.2 & Velocity < 5, 'High Intensity', 
                                      ifelse(Velocity > 5 & Velocity < 6.9, 'High Intensity', 
                                             ifelse(Velocity > 6.9, 'High Intensity',NA)))))
cbPalette <- c("#0072B2", "#D55E00")
# Bin into velocity bands
ggplot(BandedData) +
  aes(x = Minutes, y = Velocity) + 
  geom_point(aes(colour = factor(VelocityBand))) +
  scale_fill_manual((values=cbPalette), 
                    breaks = c('Low Intensity','High Intensity'), 
                    name = "Movement Classification") +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  labs(colour = "") +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```

---

class: center
# Analysing Raw (GPS) Trace Data - Time Series
.left[
* Aggregate parameters don't give granular insights into physical output
<br>
<br>
* Difficult to determine when output changes over time, using averaged data
]
<br>
--
<img src="DCStudy.png", align="middle">

---

class: center
# Analysing Raw (GPS) Trace Data - Time Series

```{r fig.height = 7, fig.width = 15, echo = FALSE}
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```

---

class: center
# Analysing Raw (GPS) Trace Data - Time Series

```{r fig.height = 7, fig.width = 15, echo = FALSE}
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  geom_vline(data = RawGPSTrace, aes(xintercept = 2.67), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 6.3), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 15.1), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 18.8), colour = "red", size = 2)  +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```

---

class: center
# Analysing Raw (GPS) Trace Data - Time Series

```{r fig.height = 7, fig.width = 15, echo = FALSE}
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  geom_vline(data = RawGPSTrace, aes(xintercept = 2.67), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 6.3), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 15.1), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 18.8), colour = "red", size = 2)  +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```

---

class: center
# Analysing Raw (GPS) Trace Data - Time Series

```{r fig.height = 7, fig.width = 15, echo = FALSE}
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  geom_vline(data = RawGPSTrace, aes(xintercept = 2.67), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 6.3), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 15.1), colour = "red", size = 2)  +
  #geom_vline(data = RawGPSTrace, aes(xintercept = 18.8), colour = "red", size = 2)  +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```


---

class: center
# Analysing Raw (GPS) Trace Data - Time Series

```{r fig.height = 7, fig.width = 15, echo = FALSE}
ggplot(RawGPSTrace) +
  aes(x = Minutes, y = Velocity) +
  geom_point(colour = "grey34") +
  geom_vline(data = RawGPSTrace, aes(xintercept = 2.67), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 6.3), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 15.1), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 18.8), colour = "red", size = 2)  +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "bottom")
```


---
class: inverse, center, top
background-image: url(https://raw.githubusercontent.com/SportStatisticsRSweet/WCSF_WorkshopInR/master/Figures/AFLWPhoto3.JPG)
background-size: cover
# Profiling Skilled Output of AFL Players

---

class: center
# Profiling Skilled Output - Aggregate Data
.left[
* Score tells us the what but not the how...
]
<img src="Rd23Scores.png", align="middle">

---

class: center
# Profiling Skilled Output - Aggregate Data
.left[
* Events are given equal importance, without context...
]
<img src="AdelaideWB.png", align="middle", width="35%">
 
---

class: center
# Profiling Skilled Output - Aggregate Data
.left[
* Score tells us the what but not the how...
] 
<br>
.left[
* Events are given equal importance, without context...
]
<br>
.left[
* Match event (time-stamped) data gives context to aggregate data
]

---

class: center
# Profiling Skilled Output - Aggregate Data
.left[
* Score tells us the what but not the how...
]
<br>
.left[
* Events are given equal importance, without context...
]
<br>
.left[
* Match event (time-stamped) data gives context to aggregate data
]
<br>
<br>
<br>
``````{r CreateTable3, echo = FALSE}
library(kableExtra)
MatchTransactionData <- data.frame(Event = c("Kick", "Handball", "Handball", "Kick"), 
                             Team = c("Western Bulldogs", "Western Bulldogs", "Adelaide", "Adelaide"), 
                             Quarter = c(1,1,1,1),
                             Time = c("0:10", "0:14", "0:16", "0:20"),
                             'Field Location' = c("Defensive Midfield", "Defensive Midfield", 
                                                  "Attacking Midfield", "Attacking Midfield"))
colnames(MatchTransactionData) <- c("Match Event", "Team", "Quarter", "Time", "Field Location")
MatchTransactionData %>%
  kable("html", full.width = T, escape = T, booktabs = T, align = "c",
  digits = 0, table.attr = "style = \"color: black;\"")%>%
  kable_styling(position = "center", font_size = 25, bootstrap_options = c("responsive","bordered"))%>%
  row_spec(0, bold = T, color = "white", background = "#000000", extra_css = "border-right: 1px solid")  %>%
  #column_spec(1:6, border_left = T, border_right = T)  %>%
  row_spec(nrow(MatchTransactionData), color = "black", extra_css = "border-bottom: 1px solid")
```

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="TimMark.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-yellow[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="RhyleePressure.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-grey[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>
.pull-left[.content-box-yellow[**Pressure:** None, chase, frontal or physical]]

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="BontRunning.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-grey[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Pressure:** None, chase, frontal or physical]]
<br>
<br> 
<br>
.pull-left[.content-box-yellow[**Velocity:** Running or stationary]]

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="SucklingKick.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-grey[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Pressure:** None, chase, frontal or physical]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Velocity:** Running or stationary]]
<br>
<br> 
<br>
.pull-left[.content-box-yellow[**Kick Distance:** < 40 m or > 40 m]]

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="LachiePossession.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-grey[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Pressure:** None, chase, frontal or physical]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Velocity:** Running or stationary]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Kick Distance:** < 40 m or > 40 m]]
<br>
<br> 
<br>
.pull-left[.content-box-yellow[**Possession Time:** < 2 secs, 2 - 4 secs, 4 - 6 secs, > 6 secs]]

---

class: left
.center[
# Profiling Skilled Output - Constraints
]
<img src="OpenTarget.JPG", align="right" width="30%" >
<br>
.pull-left[.content-box-grey[**Source:** Ground ball, mark/ free kick, handball receive or stoppage]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Pressure:** None, chase, frontal or physical]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Velocity:** Running or stationary]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Kick Distance:** < 40 m or > 40 m]]
<br>
<br> 
<br>
.pull-left[.content-box-grey[**Possession Time:** < 2 secs, 2 - 4 secs, 4 - 6 secs, > 6 secs]]
<br>
<br> 
<br>
.pull-left[.content-box-yellow[**Target:** Open or covered]]


---

class: center
# Combining Physical & Skilled Data 

```{r fig.height = 7, fig.width = 15, echo = FALSE}
SkilledInvolvements <- data.frame(Symbol = c("KE", "HI", "KI", "T", "KE"), 
                                     Time = c(4, 5.7, 7.8, 10.9, 18.5))
SkilledData <- left_join(RawGPSTrace, SkilledInvolvements, by=c("Time"))

ggplot(SkilledData) +
  aes(x = Minutes, y = Velocity, label = Symbol) +
  geom_point(colour = "grey34") +
  geom_vline(data = RawGPSTrace, aes(xintercept = 2.67), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 6.3), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 15.1), colour = "red", size = 2)  +
  geom_vline(data = RawGPSTrace, aes(xintercept = 18.8), colour = "red", size = 2)  +
  geom_label(aes(x = Time), fill = "#F0E442", colour = "black", fontface = "bold", size = 12) +
  xlab("\n Time (minutes)") +
  ylab(expression(bold(paste(Velocity,"  ",(m.s^-1))))) +
  scale_x_continuous(limits = c(0,20), expand = c(0,0)) +
  scale_y_continuous(expand = c(0,0)) +
  theme_classic() +
  theme(axis.title.x = element_text(size = 12, colour = "black", face = "bold"),
        axis.title.y = element_text(size = 12, colour = "black", face = "bold"),
        axis.text.x = element_text(size = 10, colour = "black", face = "bold"),
        axis.text.y = element_text(size = 10, colour = "black", face = "bold"),
        axis.ticks.x = element_line(colour = "black"), 
        axis.ticks.y = element_line(colour = "black"),
        legend.position = "none")
```


---
class: inverse, right
background-image: url(AFLW_WO.JPG)
background-size: cover
<br>
# Kick Detection in AFL(W) 

---
class: inverse, right
background-image: url(/Questions.JPG)
background-size: cover
# Any Questions?

<br>
<br>
<span style = 'font-size: 50%;'>
.right[
`r icon::fa("link")` [http://sportstatisticsrsweet.rbind.io/](http://sportstatisticsrsweet.rbind.io/)<br><br>
`r icon::fa("envelope")` [Alice.Sweeting@vu.edu.au](mailto:Alice.Sweeting@vu.edu.au)<br><br>
`r icon::fa("twitter")` [alicesweeting](https://twitter.com/alicesweeting)<br><br>
`r icon::fa("linkedin")` [/alicejsweeting](https://www.linkedin.com/in/alicejsweeting/)<br><br>
]
<br>
<img src="http://www.sportandrecreationspatial.com.au/images/vu-institute-health-sport.png", align="right" width="30%">
